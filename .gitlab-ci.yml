# GitLab CI/CD Pipeline for BareMetalHost Generator Operator

stages:
  - lint
  - test
  - security
  - build
  - deploy-dev
  - deploy-staging
  - deploy-prod

variables:
  # Container registry settings
  REGISTRY: $CI_REGISTRY
  IMAGE_NAME: $CI_REGISTRY_IMAGE/bmh-generator-operator
  
  # Python settings
  PYTHON_VERSION: "3.9"
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  
  # Kubernetes settings
  KUBECTL_VERSION: "1.28.0"
  HELM_VERSION: "3.12.0"
  
  # Security scanning
  SECURE_LOG_LEVEL: info

# Cache for faster builds
cache:
  paths:
    - .cache/pip/
    - venv/

# Before script to set up environment
before_script:
  - python --version
  - pip install --upgrade pip

# Lint stage
lint:python:
  stage: lint
  image: python:$PYTHON_VERSION
  script:
    - pip install flake8 black isort mypy
    - echo "Running Python linting..."
    - flake8 src/ --max-line-length=88 --extend-ignore=E203,W503
    - black --check src/
    - isort --check-only src/
    - mypy src/ --ignore-missing-imports
  allow_failure: true

lint:yaml:
  stage: lint
  image: python:$PYTHON_VERSION
  script:
    - pip install yamllint
    - echo "Running YAML linting..."
    - yamllint deploy/ -d relaxed
  allow_failure: true

lint:dockerfile:
  stage: lint
  image: hadolint/hadolint:latest-debian
  script:
    - hadolint Dockerfile
  allow_failure: true

# Test stage
test:unit:
  stage: test
  image: python:$PYTHON_VERSION
  script:
    - pip install -r requirements.txt
    - pip install pytest pytest-cov pytest-asyncio
    - echo "Running unit tests..."
    - pytest tests/ --cov=src/ --cov-report=xml --cov-report=term
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  allow_failure: true

test:kubernetes-manifests:
  stage: test
  image: alpine/k8s:$KUBECTL_VERSION
  script:
    - echo "Validating Kubernetes manifests..."
    - kubectl --dry-run=client apply -f deploy/crd.yaml
    - kubectl --dry-run=client apply -f deploy/rbac.yaml
    - kubectl --dry-run=client apply -f deploy/deployment.yaml
  allow_failure: true

# Security scanning
security:secrets:
  stage: security
  image: python:$PYTHON_VERSION
  script:
    - pip install detect-secrets
    - echo "Scanning for secrets..."
    - detect-secrets scan --all-files --baseline .secrets.baseline
  allow_failure: true

security:dependencies:
  stage: security
  image: python:$PYTHON_VERSION
  script:
    - pip install safety
    - echo "Scanning Python dependencies for vulnerabilities..."
    - safety check -r requirements.txt
  allow_failure: true

# Build stage
build:container:
  stage: build
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - echo "Building container image..."
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        tag=""
        echo "Building main branch image..."
      elif [[ "$CI_COMMIT_BRANCH" == "develop" ]]; then
        tag=":develop"
        echo "Building develop branch image..."
      else
        tag=":$CI_COMMIT_REF_SLUG"
        echo "Building feature branch image..."
      fi
    - docker build -t $IMAGE_NAME$tag .
    - docker push $IMAGE_NAME$tag
    - |
      if [[ "$CI_COMMIT_TAG" ]]; then
        echo "Building release image with tag $CI_COMMIT_TAG..."
        docker tag $IMAGE_NAME$tag $IMAGE_NAME:$CI_COMMIT_TAG
        docker push $IMAGE_NAME:$CI_COMMIT_TAG
        docker tag $IMAGE_NAME$tag $IMAGE_NAME:latest
        docker push $IMAGE_NAME:latest
      fi
  only:
    - main
    - develop
    - tags
    - merge_requests

security:container-scan:
  stage: security
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - echo "Scanning container for vulnerabilities..."
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        tag=""
      elif [[ "$CI_COMMIT_BRANCH" == "develop" ]]; then
        tag=":develop"
      else
        tag=":$CI_COMMIT_REF_SLUG"
      fi
    - docker pull $IMAGE_NAME$tag
    - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v $PWD:/tmp aquasec/trivy:latest image --exit-code 0 --no-progress --format table $IMAGE_NAME$tag
  dependencies:
    - build:container
  allow_failure: true
  only:
    - main
    - develop
    - tags
    - merge_requests

# Development deployment
deploy:dev:
  stage: deploy-dev
  image: alpine/k8s:$KUBECTL_VERSION
  environment:
    name: development
    url: https://dev-k8s.example.com
  before_script:
    - echo $KUBE_CONFIG_DEV | base64 -d > kubeconfig
    - export KUBECONFIG=kubeconfig
  script:
    - echo "Deploying to development environment..."
    - kubectl apply -f deploy/crd.yaml
    - kubectl apply -f deploy/rbac.yaml
    - |
      # Update image in deployment
      sed -i "s|your-registry/bmh-generator-operator:latest|$IMAGE_NAME:$CI_COMMIT_REF_SLUG|g" deploy/deployment.yaml
    - kubectl apply -f deploy/deployment.yaml
    - kubectl rollout status deployment/bmh-generator-operator -n metal3-system --timeout=300s
    - echo "Development deployment completed"
  only:
    - merge_requests
  when: manual

# Staging deployment
deploy:staging:
  stage: deploy-staging
  image: alpine/k8s:$KUBECTL_VERSION
  environment:
    name: staging
    url: https://staging-k8s.example.com
  before_script:
    - echo $KUBE_CONFIG_STAGING | base64 -d > kubeconfig
    - export KUBECONFIG=kubeconfig
  script:
    - echo "Deploying to staging environment..."
    - kubectl apply -f deploy/crd.yaml
    - kubectl apply -f deploy/rbac.yaml
    - |
      # Update image in deployment for develop branch
      sed -i "s|your-registry/bmh-generator-operator:latest|$IMAGE_NAME:develop|g" deploy/deployment.yaml
    - kubectl apply -f deploy/deployment.yaml
    - kubectl rollout status deployment/bmh-generator-operator -n metal3-system --timeout=300s
    - echo "Staging deployment completed"
  only:
    - develop
  when: manual

# Production deployment
deploy:prod:
  stage: deploy-prod
  image: alpine/k8s:$KUBECTL_VERSION
  environment:
    name: production
    url: https://prod-k8s.example.com
  before_script:
    - echo $KUBE_CONFIG_PROD | base64 -d > kubeconfig
    - export KUBECONFIG=kubeconfig
  script:
    - echo "Deploying to production environment..."
    - kubectl apply -f deploy/crd.yaml
    - kubectl apply -f deploy/rbac.yaml
    - |
      # Use latest tag for production
      if [[ "$CI_COMMIT_TAG" ]]; then
        sed -i "s|your-registry/bmh-generator-operator:latest|$IMAGE_NAME:$CI_COMMIT_TAG|g" deploy/deployment.yaml
      else
        sed -i "s|your-registry/bmh-generator-operator:latest|$IMAGE_NAME:latest|g" deploy/deployment.yaml
      fi
    - kubectl apply -f deploy/deployment.yaml
    - kubectl rollout status deployment/bmh-generator-operator -n metal3-system --timeout=300s
    - echo "Production deployment completed"
  only:
    - main
    - tags
  when: manual
  rules:
    - if: '$CI_COMMIT_TAG'
      when: manual
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      when: manual

# Cleanup job for feature branches
cleanup:feature-images:
  stage: deploy-prod
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - echo "Cleaning up feature branch images..."
    - |
      # This would require additional registry API calls to delete old images
      echo "Feature branch image cleanup - implement based on your registry API"
  only:
    - merge_requests
  when: manual

# Release automation
create:release:
  stage: deploy-prod
  image: alpine:latest
  before_script:
    - apk add --no-cache curl jq
  script:
    - echo "Creating release notes..."
    - |
      curl --request POST \
           --url "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/releases" \
           --header "PRIVATE-TOKEN: ${CI_JOB_TOKEN}" \
           --header "Content-Type: application/json" \
           --data '{
             "name": "Release '$CI_COMMIT_TAG'",
             "tag_name": "'$CI_COMMIT_TAG'",
             "description": "Release '$CI_COMMIT_TAG' of BareMetalHost Generator Operator"
           }'
  only:
    - tags
  when: manual

# Include additional CI templates (optional)
include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Dependency-Scanning.gitlab-ci.yml
  - template: Security/Container-Scanning.gitlab-ci.yml